---
title: "12worksheet"
format: pdf
---

```{r}
library(BiocManager)
library(DESeq2)
```

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)

head(metadata)
```
```{r}
View(metadata)
```


Q1. How many genes in the set? 38694

Q2. How many 'control' cell lines are there? 4

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums(control.counts)/4 
head(control.mean)
```

Q4. 

```{r}
## mean per gene across drug treated samples
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowSums( counts[ ,treated$id] )/4 
names(treated.mean) <- counts$ensgene
```

```{r}
##combine the mean datas together
meancounts <- data.frame(control.mean, treated.mean)
```

```{r}
## sum of mean counts across all genes for each group
colSums(meancounts)
```

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```
Q5B. What geom?() function would you use to create a ggplot out of this data?

geom_point()

Q6. What argument to plot() allows you to plot both axes on a log scale?

log=xy

```{r}
plot(meancounts[,1],meancounts[,2], log = "xy",  xlab="Control", ylab="Treated")
```

```{r}
#calculate log2foldchange and add it to meancounts dataframe
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
##filtering out NaN/zero and negative infinity results
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

Q7. arr.ind will have which() return values that match the given value, in this case: 0. Which will be looking at both rows and columns. Since we don't want any values with 0 in the gene row, the unique function will prevent a certain entry from being counted twice if it also has a 0 value in it's column.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

```{r}
which(up.ind, arr.ind=TRUE)
which(down.ind, arr.ind=TRUE)
```
Q8. How many up regulated genes?
250

Q9. How mayn downregulated genes?
367

Q10. Can we trust these results?
No. We have not been able to test the results for statistic significance.

```{r}
library(DESeq2)
citation("DESeq2")
```


```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design=~dex)

```
```{r}
dds <- DESeq(dds)
```
```{r}
res <- results(dds)
res
```
```{r}
res2 <- as.data.frame(res)

View(res2)
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```


```{r}
columns(org.Hs.eg.db)
```

```{r}
# adding columns to results table with mapIds
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```
```{r}
head(res)
```
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```
```{r}
#arrange and view results by p-value
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```


```{r}

plot(res$log2FoldChange, -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```
```{r}
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```
```{r}
library(pathview)
library(gage)
library(gageData)
```


```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```
```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```
```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

