---
title: "Class 6 R Functions"
format: pdf
---

We are looking at *R Functions* and how to write them.

>Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput”



```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Follow the guidelines from class
- Write a working snippet of code that solves simple version of problem

```{r}
# mean()
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)


mean(student1)
```

Must drop lowest score. Must identify lowest score in vector.

```{r}
# Which element of vector is the lowest?
which.min(student1)
```
Time to drop lowest score from grade calculation

```{r}
# return everything but the 
# eighth element in the vector
student1[-8]
```

Now we use which.min() to return all other elements of vector minus the smallest one

```{r}
student1[-which.min(student1)]
```
```{r}
# average of student 1 with lowest score dropped 
# first working snippet of code
mean( student1[-which.min(student1)] )
```
Now other students??

using na.rm=TRUE only would be an unfair grading approach

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm=TRUE)

student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm=TRUE)

```
One approach cold be to replace all NA values with zero

First, need to be able to find NA values of vector.

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
x <- student2

#tells us if any values in vector is NA
is.na(x)

#tells us location of NA values in vector
which(is.na(x))
```
NA elements identified. Time to "mask" them with value of 0 for calculations.

```{r}
# Changing all NA elements in vector "x" to 0
x[is.na(x)] <- 0
x
mean(x)
```
Now need to be able to drop lowest score before calculating mean

```{r}
x[is.na(x)] <- 0
mean( x[-which.min(x)] )
```
Our working snippet code
```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
x <- student3
x[is.na(x)] <- 0
mean( x[-which.min(x)] )
```

## Function

Take the snippet and turn into function
Every function has 3 parts

- A name, in this case 'grade()'
- Input arguments, in this case a vector of student numeric scores
- The body, aka the working snippet

Using RStudio, will select 'Code' > 'Extract Function'

```{r}
#' Calculate average score from a vector of
#' student scores while dropping the lowest score.
#' Missing values are assigned value of 0.
#'
#' @param x A numeric vector of homework scores of a student
#'
#' @return Average score
#' @examples
#'  student <- c(100, NA, 90, 97
#'  grade(student))

grade <- function(x) {
  # mask NA with zero
  # Treat NA as zero in calculation
  x[is.na(x)] <- 0
  # Exclude lowest score from calculation
  mean( x[-which.min(x)] )
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

It works!

Now we can use our function on class data in the CSV file:
“https://tinyurl.com/gradeinput”

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
```

```{r}
apply(gradebook, 1, grade)
```
>Q2. Who is the top scoring student overall in the gradebook?

```{r}
# Apply calculations to value 'results'
results <- apply(gradebook, 1, grade)
# Sort the values by decreasing order
sort(results, decreasing = TRUE)
```

```{r}
which.max(results)
```

>Q3. Which homework was the toughest on the students?

```{r}
gradebook
```

```{r}
avg.scores <- apply(gradebook, 2, mean, na.rm = TRUE)
avg.scores
which.min(avg.scores)
```
```{r}
med.scores <- apply(gradebook, 2, median, na.rm = TRUE)
med.scores
which.min(med.scores)
```
```{r}
boxplot(gradebook)
```


















